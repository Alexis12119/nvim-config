{
  "Competitive Programming": {
    "prefix": "cpt",
    "body": [
      "// Competitive Programming Setup",
      "#include <algorithm>",
      "#include <chrono>",
      "#include <cmath>",
      "#include <cstring>",
      "#include <iostream>",
      "#include <map>",
      "#include <random>",
      "#include <set>",
      "#include <vector>",
      "",
      "using namespace std;",
      "",
      "mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count());",
      "#define shuf(v) shuffle(all(v), rnd);",
      "#define fi(i, a, b) for (int i = a; i <= b; i++)",
      "#define fd(i, a, b) for (int i = a; i >= b; i--)",
      "#define all(v) v.begin(), v.end()",
      "#define ld long double",
      "#define ll long long",
      "#define gcd(a, b) __gcd(a, b)",
      "#define lcm(a, b) (a / gcd(a, b)) * b",
      "#define count(a, x) count(all(a), x)",
      "#define sum(a) accumulate(all(a), 0)",
      "#define max_ele(a) *max_element(all(a))",
      "#define min_ele(a) *min_element(all(a))",
      "#define sz(s) int(s.size())",
      "#define PI 3.1415926535897932384626433832795l",
      "/// ----------------------------- (Debug) ------------------------------",
      "#define sim template <class c",
      "#define ris return *this",
      "#define dor > debug& operator<<",
      "#define eni(x) sim > typename enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {",
      "sim > struct rge { c b, e; };",
      "sim > rge<c> range(c i, c j) {",
      "\treturn rge<c>{ i,j };",
      "}",
      "sim > auto dud(c* x) -> decltype(cerr << *x, 0);",
      "sim > char dud(...);",
      "struct debug {",
      "#ifdef AL",
      "\teni(!=) cerr << boolalpha << i;",
      "\tris;",
      "} eni(==) ris << range(begin(i), end(i));",
      "}",
      "sim, class b dor(pair<b, c> d) {",
      "\tris << \"(\" << d.first << \", \" << d.second << \")\";",
      "}",
      "sim dor(rge<c> d) {",
      "\t*this << \"[\";",
      "\tfor (auto it = d.b; it != d.e; ++it)",
      "\t\t*this << &\", \" + 2 * (it == d.b) << *it;",
      "\tris << \"]\";",
      "}",
      "#else",
      "\tsim dor(const c&) {",
      "\t\tris;",
      "}",
      "#endif",
      "}",
      ";",
      "vector<char*> tokenizer(const char* args) {",
      "\tchar* token = new char[111];",
      "\tstrcpy(token, args);",
      "\ttoken = strtok(token, \", \");",
      "\tvector<char*> v({ token });",
      "\twhile ((token = strtok(NULL, \", \")))",
      "\t\tv.push_back(token);",
      "\treturn reverse(v.begin(), v.end()), v;",
      "}",
      "void debugg(vector<char*>) {",
      "\tcerr << \"\\b\\b \";",
      "}",
      "template <typename Head, typename... Tail> void debugg(vector<char*> args, Head H, Tail... T) {",
      "\tdebug() << \"[\" << args.back() << \": \" << H << \"] \";",
      "\targs.pop_back();",
      "\tdebugg(args, T...);",
      "}",
      "#define harg(...) #__VA_ARGS__",
      "#ifdef AL",
      "#define dbg(...)                                                                                   \\",
      "\t{                                                                                              \\",
      "\t\tdebugg(tokenizer(harg(__VA_ARGS__,- > Line)), __VA_ARGS__, __LINE__);                   \\",
      "\t\tcerr << \"\\n\";                                                                              \\",
      "\t}",
      "#else",
      "#define dbg(...)                                                                                   \\",
      "\t{}",
      "#endif",
      "",
      "/// -----------------------------------------------------------------------",
      "",
      "void solve() {",
      "\t${1:Start}",
      "}",
      "",
      "int main() {",
      "#ifdef AL",
      "\tcout << \"------INPUT------\\n\";",
      "#endif",
      "\tios::sync_with_stdio(0);",
      "\tcin.tie(0);",
      "#ifdef AL",
      "\tcout << \"------OUTPUT------\\n\";",
      "#endif",
      "\tsolve();",
      "#ifdef AL",
      "\tcerr << \"\\n\" << \"Finished in \" << clock() * 1.0 / CLOCKS_PER_SEC << \" sec/s\" << \"\\n\";",
      "#endif",
      "\treturn 0;",
      "}"
    ]
  }
}
