snippet cpt Competitive Programming Setup
	// Competitive Programming Setup
	#include <algorithm>
	#include <chrono>
	#include <cmath>
	#include <cstring>
	#include <iostream>
	#include <map>
	#include <random>
	#include <set>
	#include <vector>

	using namespace std;

	mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count());
	#define shuf(v) shuffle(all(v), rnd);
	#define fi(i, a, b) for (int i = a; i <= b; i++)
	#define fd(i, a, b) for (int i = a; i >= b; i--)
	#define all(v) v.begin(), v.end()
	#define ld long double
	#define ll long long
	#define gcd(a, b) __gcd(a, b)
	#define lcm(a, b) (a / gcd(a, b)) * b	
	#define count(a, x) count(all(a), x)
	#define sum(a) accumulate(all(a), 0)
	#define max_ele(a) *max_element(all(a))
	#define min_ele(a) *min_element(all(a))
	#define sz(s) int(s.size())
	#define PI 3.1415926535897932384626433832795l
	/// ----------------------------- (Debug) ------------------------------
	#define sim template <class c
	#define ris return *this
	#define dor > debug& operator<<
	#define eni(x) sim > typename enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {
	sim > struct rge { c b, e; };
	sim > rge<c> range(c i, c j) {
		return rge<c>{ i, j };
	}
	sim > auto dud(c* x) -> decltype(cerr << *x, 0);
	sim > char dud(...);
	struct debug {
	#ifdef AL
		eni(!=) cerr << boolalpha << i;
		ris;
	} eni(==) ris << range(begin(i), end(i));
	}
	sim, class b dor(pair<b, c> d) {
		ris << "(" << d.first << ", " << d.second << ")";
	}
	sim dor(rge<c> d) {
		*this << "[";
		for (auto it = d.b; it != d.e; ++it)
			*this << &", " + 2 * (it == d.b) << *it;
		ris << "]";
	}
	#else
		sim dor(const c&) {
			ris;
		}
	#endif
	}
	;
	vector<char*> tokenizer(const char* args) {
		char* token = new char[111];
		strcpy(token, args);
		token = strtok(token, ", ");
		vector<char*> v({ token });
		while ((token = strtok(NULL, ", ")))
			v.push_back(token);
		return reverse(v.begin(), v.end()), v;
	}
	void debugg(vector<char*>) {
		cerr << "\b\b ";
	}
	template <typename Head, typename... Tail> void debugg(vector<char*> args, Head H, Tail... T) {
		debug() << "[" << args.back() << ": " << H << "] ";
		args.pop_back();
		debugg(args, T...);
	}
	#define harg(...) #__VA_ARGS__
	#ifdef AL
	#define dbg(...)                                                                                   \
		{                                                                                              \
			debugg(tokenizer(harg(__VA_ARGS__, -- > Line)), __VA_ARGS__, __LINE__);                   \
			cerr << '\n';                                                                              \
		}
	#else
	#define dbg(...)                                                                                   \
		{}
	#endif

	/// -----------------------------------------------------------------------

	void solve() {
		${1:Start}
	}

	int main() {
	#ifdef AL
		cout << "------INPUT------\n";
	#endif
		ios::sync_with_stdio(0);
		cin.tie(0);
	#ifdef AL
		cout << "------OUTPUT------\n";
	#endif
		solve();
	#ifdef AL
		cerr << '\n' << "Finished in " << clock() * 1.0 / CLOCKS_PER_SEC << " sec/s" << '\n';
	#endif
		return 0;
	}
