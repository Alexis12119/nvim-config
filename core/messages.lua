local M = {
  "Why don't Neovim users ever get lost in their text files? Because they always 'find' their way!",
  "Why don't Neovim users need a GPS? Because they're experts at 'mapping' their routes!",
  "Why did the Neovim user become a musician? Because they can play the keyboard like a pro!",
  "Why don't Neovim users ever lose track of time? Because they have a 'status line' to keep them informed!",
  "Why did the Neovim user open a detective agency? Because they have an 'eye' for spotting code errors!",
  "Why did the developer bring a ladder to the coding competition? To take their code to the next level!",
  "When your code is running slowly: 'It's not a bug; it's a feature that takes its time.'",
  "Why did the programmer go to therapy? Because their code had too many 'issues'!",
  "Why was the JavaScript developer sad? Because they didn't 'console' their feelings!",
  "Why did the developer get locked out of their own codebase? They forgot the 'key'!",
  "Welcome to Neovim, where plugins multiply faster than rabbits!",
  "How many programmers does it take to change a lightbulb? None, that's a hardware problem!",
  "When you're debugging and can't find the issue: 'I swear, it was working yesterday!'",
  "Why don't programmers trust stairs? Because they're always up to 'something'!",
  "When you fix a bug without even trying: 'I guess I'm just that good.'",
  "Why was the computer cold? It left its Windows open!",
  "Why do Java developers wear glasses? Because they don't C#!",
  "Why did the programmer quit their job? They didn't get arrays!",
  "When you write a one-liner that solves a complex problem: 'I am a genius, yes, I am.'",
  "When you refactor your code and it breaks everything: 'I've made a huge mistake.'",
  "When you accidentally close your editor with unsaved changes: 'Goodbye, cruel world.'",
  "When you discover a bug on a Friday afternoon: 'Looks like we're working late again.'",
  "When you realize your code from last year: 'Who wrote this junk? Oh, wait...'",
  "When you write a comment and six months later can't understand it: 'I speak my own language.'",
  "When you join a new project with zero documentation: 'Here be dragons.'",
  "When you add a 'TODO' comment and hope someone else will deal with it: 'Not my problem.'",
  "Remember, coding is not just about writing code; it's about solving problems.",
  "Stay curious and never stop learning. Technology is always evolving.",
  "When debugging, don't guess; use systematic troubleshooting techniques.",
  "Keep your code DRY (Don't Repeat Yourself) to make it more maintainable.",
  "Use meaningful variable and function names. Your code should read like a story.",
  "Always test your code thoroughly before deploying it. Automated tests are your friends.",
  "Spend time designing your code before jumping into implementation. Good architecture pays off.",
  "Learn to break down complex problems into smaller, manageable tasks.",
  "Code with the future in mind. Write code that's easy to understand and maintain.",
  "Version control is your safety net. Use Git or other VCS systems religiously.",
  "Document your code and processes. It will save you and your team countless hours.",
  "Don't optimize prematurely. Measure first, then optimize where it matters.",
  "Read other people's code. It's a great way to learn different coding styles and techniques.",
  "Stay organized with your project structure. Consistency makes collaboration smoother.",
  "Take regular breaks to prevent burnout. Your productivity will thank you.",
  "Use comments sparingly but effectively. Explain why, not just what.",
  "Consider pair programming or code reviews to catch issues early and learn from others.",
  "Know when to ask for help. Programming is a team effort.",
  "Programming is not just about the code; it's about the problem-solving mindset.",
  "Keep your development environment clean and well-maintained for consistent productivity.",
  "Learn from your mistakes and failures; they are valuable lessons in programming.",
  "When faced with a bug, isolate and reproduce it before attempting to fix it.",
  "Why don't programmers like to play hide and seek? Good luck hiding when your code has so many 'bugs.'",
  "Why did the developer stay calm during the crisis? Because they knew how to 'handle' exceptions.",
  "Why was the JavaScript developer always smiling? Because they had 'callbacks' for everything!",
  "Why did the programmer break up with their keyboard? It had too many 'commitment' issues.",
  "Margaret Hamilton coined the term 'software engineer.'",
  "Ada Lovelace is considered the first computer programmer.",
  "The first computer bug was a literal moth.",
  "The first computer virus was the 'Brain' virus.",
  "Why did the programmer break up with their internet browser? Because they found someone better who understood their 'cookies.'",
  "Why did the developer go broke? They spent all their money on 'RAMen' noodles.",
  "Why did the C++ programmer always carry a bucket of water to work? To catch memory leaks before they flooded the code!",
  "I don't always test my code, but when I do, I do it in production. That's where the real memory leaks happen!",
  "Why was the C++ developer always broke? Because they couldn't stop spending their memory!",
  "What's a C++ programmer's favorite horror movie? 'The Curse of the Unreleased Memory!'",
  "When your C++ program enters an infinite loop, but your coffee supply isn't infinite.",
  "When you encounter a C++ template error message and it looks like ancient hieroglyphics.",
}

return M
